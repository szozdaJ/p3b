exec.c:  curproc->tf->eip = elf.entry;  // main
exec.c:  curproc->tf->esp = sp;
kernel.asm:  curproc->tf->eip = elf.entry;  // main
kernel.asm:  curproc->tf->esp = sp;
kernel.asm:  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
kernel.asm:  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
kernel.asm:  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
kernel.asm:  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
kernel.asm:  p->tf->es = p->tf->ds;
kernel.asm:  p->tf->ss = p->tf->ds;
kernel.asm:  p->tf->eflags = FL_IF;
kernel.asm:  p->tf->esp = PGSIZE;
kernel.asm:  p->tf->eip = 0;  // beginning of initcode.S
kernel.asm:  np->tf->eax = 0;
kernel.asm:  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
kernel.asm:  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
kernel.asm:  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
kernel.asm:  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
kernel.asm:  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
kernel.asm:  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
kernel.asm:  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
kernel.asm:  num = curproc->tf->eax;
kernel.asm:    curproc->tf->eax = syscalls[num]();
kernel.asm:    curproc->tf->eax = -1;
kernel.asm:    curproc->tf->eax = -1;
kernel.asm:  if(tf->trapno == T_SYSCALL){
kernel.asm:  switch(tf->trapno){
kernel.asm:  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
kernel.asm:     tf->trapno == T_IRQ0+IRQ_TIMER)
kernel.asm:  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
kernel.asm:    if(myproc() == 0 || (tf->cs&3) == 0){
kernel.asm:            myproc()->pid, myproc()->name, tf->trapno,
kernel.asm:            myproc()->pid, myproc()->name, tf->trapno,
kernel.asm:  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
kernel.asm:  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
kernel.asm:  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
kernel.asm:  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
proc.c:  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
proc.c:  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
proc.c:  p->tf->es = p->tf->ds;
proc.c:  p->tf->ss = p->tf->ds;
proc.c:  p->tf->eflags = FL_IF;
proc.c:  p->tf->esp = PGSIZE;
proc.c:  p->tf->eip = 0;  // beginning of initcode.S
proc.c:  np->tf->eax = 0;
proc.c:  np->tf->esp = (uint) stack;
proc.c:  np->tf->eax = 0;
syscall.c:  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
syscall.c:  num = curproc->tf->eax;
syscall.c:    curproc->tf->eax = syscalls[num]();
syscall.c:    curproc->tf->eax = -1;
trap.c:  if(tf->trapno == T_SYSCALL){
trap.c:  switch(tf->trapno){
trap.c:            cpuid(), tf->cs, tf->eip);
trap.c:    if(myproc() == 0 || (tf->cs&3) == 0){
trap.c:              tf->trapno, cpuid(), tf->eip, rcr2());
trap.c:            myproc()->pid, myproc()->name, tf->trapno,
trap.c:            tf->err, cpuid(), tf->eip, rcr2());
trap.c:  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
trap.c:     tf->trapno == T_IRQ0+IRQ_TIMER)
trap.c:  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
